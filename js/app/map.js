// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(["jquery", "jquery-cookie", "underscore", "backbone", "geoPosition", "async!http://maps.google.com/maps/api/js?sensor=false'"], function(MapModule) {
    var MapView, MarkerList, MarkerModel;
    MarkerModel = (function(_super) {
      __extends(MarkerModel, _super);

      function MarkerModel() {
        return MarkerModel.__super__.constructor.apply(this, arguments);
      }

      MarkerModel.prototype.initialize = function() {};

      return MarkerModel;

    })(Backbone.Model);
    MarkerList = (function(_super) {
      __extends(MarkerList, _super);

      function MarkerList() {
        return MarkerList.__super__.constructor.apply(this, arguments);
      }

      MarkerList.prototype.model = MarkerModel;

      MarkerList.prototype.initialize = function(opts) {
        if (opts) {
          if (opts.url) {
            return this.url = opts.url;
          }
        }
      };

      MarkerList.prototype.comparator = function(marker) {
        return marker.get('id');
      };

      return MarkerList;

    })(Backbone.Collection);
    MapView = (function(_super) {
      __extends(MapView, _super);

      function MapView() {
        return MapView.__super__.constructor.apply(this, arguments);
      }

      MapView.prototype.el = $('#map');

      MapView.prototype.center = null;

      MapView.prototype.map_id = "#my_map";

      MapView.prototype.map = null;

      MapView.prototype.width = '100%';

      MapView.prototype.height = '100%';

      MapView.prototype.markers = [];

      MapView.prototype.centerMarker = null;

      MapView.prototype.bounds = null;

      MapView.prototype.initialize = function(opts) {
        if (opts) {
          if (opts.width) {
            this.width = opts.width;
          }
          if (opts.height) {
            this.height = opts.height;
          }
        } else {
          opts = {};
        }
        if (this.storedPosition()) {
          this.center = this.storedPosition();
        } else {
          this.getBrowserGeolocation();
        }
        if ($(this.el).length) {
          return this.render(opts);
        }
      };

      MapView.prototype.render = function(opts) {
        var map_options;
        $(this.el).append("<div id='" + this.map_id + "' style='width: " + this.width + "; height: " + this.height + ";'></div>");
        map_options = {
          zoom: 12,
          center: new google.maps.LatLng(this.center.lat, this.center.lng)
        };
        this.map = new google.maps.Map(document.getElementById(this.map_id), map_options);
        this.bounds = new google.maps.LatLngBounds();
        if (opts.yourPositionMarker === true) {
          this.setCenterMarker(new google.maps.LatLng(this.center.lat, this.center.lng), opts.centerPin);
        }
        if (opts.url) {
          return this.fetchMarkers(opts.url, opts.pinsImage);
        }
      };

      MapView.prototype.setCenterMarker = function(position, pinImage) {
        this.centerMarker = new google.maps.Marker({
          position: position,
          map: this.map,
          icon: pinImage,
          title: "Mi posici√≥n"
        });
        return this.bounds.extend(this.centerMarker.getPosition());
      };

      MapView.prototype.fetchMarkers = function(url, pinsImage) {
        var list, self;
        if (pinsImage == null) {
          pinsImage = null;
        }
        list = new MarkerList({
          url: url
        });
        self = this;
        return list.fetch({
          success: function() {
            list.forEach(function(m, i) {
              self.markers[m.get('id')] = new google.maps.Marker({
                position: new google.maps.LatLng(m.get('lat'), m.get('lng')),
                map: self.map,
                title: "H",
                icon: pinsImage
              });
              return self.bounds.extend(self.markers[m.get('id')].getPosition());
            });
            return self.map.fitBounds(self.bounds);
          }
        });
      };

      MapView.prototype.getBrowserGeolocation = function() {
        if (geoPosition.init()) {
          return geoPosition.getCurrentPosition(this.storePosition, this.geolocationErrorCallback);
        } else {
          return console.log("Error al localizar");
        }
      };

      MapView.prototype.storedPosition = function() {
        var lat, lng;
        lat = $.cookie('lat');
        lng = $.cookie('lng');
        if (lat && lng) {
          return {
            lat: lat,
            lng: lng
          };
        } else {
          return false;
        }
      };

      MapView.prototype.storePosition = function(position) {
        $.cookie('lat', position.coords.latitude);
        $.cookie('lng', position.coords.longitude);
        this.center = this.storedPosition();
      };

      MapView.prototype.geolocationErrorCallback = function(err) {
        if (err.code === 1) {
          return console.log("Denied by user.");
        }
      };

      return MapView;

    })(Backbone.View);
    window.MapView = MapView;
    return load_app();
  });

}).call(this);


//# sourceMappingURL=map.js.map
